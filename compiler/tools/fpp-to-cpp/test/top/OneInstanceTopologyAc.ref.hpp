// ======================================================================
// \title  OneInstanceTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for OneInstance topology
// ======================================================================

#ifndef M_OneInstanceTopologyAc_HPP
#define M_OneInstanceTopologyAc_HPP

#include "C.hpp"
#include "OneInstanceTopologyDefs.hpp"
#include "OneInstance_P1TlmPacketsAc.hpp"
#include "OneInstance_P2TlmPacketsAc.hpp"
#include "OneInstance_P3TlmPacketsAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace M {

  //! c1
  extern C c1;

}

namespace M {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      M_c1 = 0x100,
    };
  }

  namespace InstanceIds {
    enum {
      M_c1,
    };
  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
