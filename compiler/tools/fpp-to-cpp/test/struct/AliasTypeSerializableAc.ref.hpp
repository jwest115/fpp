// ======================================================================
// \title  AliasTypeSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for AliasType struct
// ======================================================================

#ifndef AliasTypeSerializableAc_HPP
#define AliasTypeSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "TAliasAliasAc.hpp"
#include "U16AliasAliasAc.hpp"

class AliasType :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(U16Alias) +
        TAlias::SERIALIZED_SIZE
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    AliasType();

    //! Member constructor
    AliasType(
        U16Alias x,
        const TAlias& y
    );

    //! Copy constructor
    AliasType(
        const AliasType& obj //!< The source object
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    AliasType& operator=(
        const AliasType& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const AliasType& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const AliasType& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const AliasType& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member x
    U16Alias getx() const
    {
      return this->m_x;
    }

    //! Get member y
    TAlias& gety()
    {
      return this->m_y;
    }

    //! Get member y (const)
    const TAlias& gety() const
    {
      return this->m_y;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        U16Alias x,
        const TAlias& y
    );

    //! Set member x
    void setx(U16Alias x);

    //! Set member y
    void sety(const TAlias& y);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    U16Alias m_x;
    TAlias m_y;

};

#endif
