#!/bin/sh -e

cd `dirname $0`

. ../../../../scripts/test-utils.sh

fpp_to_json=../../../../bin/fpp-to-json

# Get the name of a test associated with an FPP input file:
# 1. Remove the path prefix .*/fpp-check/test/
# 2. Replace all path separators / with __
get_test_name()
{
  echo $1 | sed -e 's;.*/fpp-check/test/\(.*\)\.fpp$;\1;' -e 's;/;__;g'
}

# Run fpp-to-json on fpp-check test cases to (1) get the native build
# tracing info and (2) test the native build. All we care about is
# that the tool ran without crashing. For these tests, we ignore
# the output of the tool.
run_fpp_check_test() {
  infile=$1
  # Check for signs of a crash
  status=0
  if $fpp_to_json $infile 2>&1 | grep -qi "exception in thread"
  then
    # Record the error output for debugging
    test_name=`get_test_name $infile`
    $fpp_to_json $infile > $test_name.out.txt 2>&1 || true
    status=1
  fi
  # Remove the tool output, if any.
  # If the tool execution caused an error, but there was no
  # crash, there won't be any output, and that's OK.
  rm -f fpp-ast.json fpp-loc-map.json fpp-analysis.json
  return $status
}

# Generate fpp-check test cases
generate_fpp_check_tests()
{
  # Clear fpp-check-tests.sh
  rm -f fpp-check-tests.sh
  # Find all .fpp input files under ../../../fpp-check/test
  for file in `find ../../../fpp-check/test -name '*.fpp'`
  do
    # Get the name of the test associated with the file
    test_name=`get_test_name $file`
    # Add the name to the output of this function
    echo $test_name
    # Append a test function with that name to fpp-check-tests.sh
    echo "
$test_name()
{
  run_fpp_check_test $file
}" >> fpp-check-tests.sh
  done
}

fpp_check_tests=`generate_fpp_check_tests`

. ./fpp-check-tests.sh

run_suite $fpp_check_tests
